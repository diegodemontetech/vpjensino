generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Users and Authentication
model User {
  id              String    @id @default(uuid())
  name            String
  email           String    @unique
  password        String
  role            String    @default("user")
  avatar          String?
  totalHours      Float     @default(0)
  averageGrade    Float     @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  groups          UserGroup[]
  courseProgress  CourseProgress[]
  certificates    Certificate[]
  comments        Comment[]
  news           News[]
  ebookProgress   EbookProgress[]
}

model UserGroup {
  id            String    @id @default(uuid())
  name          String    @unique
  permissions   String[]  // Stored as JSON array
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  users         User[]
  courses       Course[]
}

// Courses and Learning
model Course {
  id            String    @id @default(uuid())
  title         String
  description   String
  thumbnail     String
  duration      String
  category      String
  instructor    String
  rating        Float     @default(0)
  status        String    @default("draft") // draft, published, archived
  isFeatured    Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  lessons       Lesson[]
  progress      CourseProgress[]
  certificates  Certificate[]
  userGroups    UserGroup[]
  category      Category     @relation(fields: [categoryId], references: [id])
  categoryId    String
}

model Lesson {
  id            String    @id @default(uuid())
  title         String
  description   String
  duration      String
  videoUrl      String
  order         Int
  attachments   Json?     // Stored as JSON array of {name, url}
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  course        Course    @relation(fields: [courseId], references: [id])
  courseId      String
  progress      LessonProgress[]
  quiz          Quiz?
}

model Quiz {
  id            String    @id @default(uuid())
  questions     String    // Stored as JSON array
  passingScore  Int       @default(70)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  lesson        Lesson    @relation(fields: [lessonId], references: [id])
  lessonId      String    @unique
}

model CourseProgress {
  id            String    @id @default(uuid())
  progress      Float     @default(0)
  status        String    @default("not_started") // not_started, in_progress, completed
  grade         Float?
  startedAt     DateTime  @default(now())
  completedAt   DateTime?

  // Relations
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  course        Course    @relation(fields: [courseId], references: [id])
  courseId      String
  lessons       LessonProgress[]

  @@unique([userId, courseId])
}

model LessonProgress {
  id            String    @id @default(uuid())
  completed     Boolean   @default(false)
  watchTime     Float     @default(0)
  lastPosition  Float     @default(0)
  completedAt   DateTime?

  // Relations
  progress      CourseProgress  @relation(fields: [progressId], references: [id])
  progressId    String
  lesson        Lesson    @relation(fields: [lessonId], references: [id])
  lessonId      String

  @@unique([progressId, lessonId])
}

model Certificate {
  id            String    @id @default(uuid())
  grade         Float
  issuedAt      DateTime  @default(now())

  // Relations
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  course        Course    @relation(fields: [courseId], references: [id])
  courseId      String

  @@unique([userId, courseId])
}

// Categories and Settings
model Category {
  id            String    @id @default(uuid())
  name          String    @unique
  description   String
  isActive      Boolean   @default(true)
  usedInCourses Boolean   @default(true)
  usedInEbooks  Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  courses       Course[]
  ebooks        Ebook[]
}

// E-books
model Ebook {
  id            String    @id @default(uuid())
  title         String
  description   String
  author        String
  thumbnail     String
  fileUrl       String
  pages         Int
  readTime      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  category      Category  @relation(fields: [categoryId], references: [id])
  categoryId    String
  progress      EbookProgress[]
}

model EbookProgress {
  id            String    @id @default(uuid())
  currentPage   Int       @default(0)
  completed     Boolean   @default(false)
  startedAt     DateTime  @default(now())
  completedAt   DateTime?

  // Relations
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  ebook         Ebook     @relation(fields: [ebookId], references: [id])
  ebookId       String

  @@unique([userId, ebookId])
}

// News and Blog
model News {
  id            String    @id @default(uuid())
  title         String
  content       String    @db.Text
  thumbnail     String
  category      String
  readTime      String
  isHighlighted Boolean   @default(false)
  status        String    @default("draft") // draft, published, archived
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  author        User      @relation(fields: [authorId], references: [id])
  authorId      String
  comments      Comment[]
}

model Comment {
  id            String    @id @default(uuid())
  content       String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  author        User      @relation(fields: [authorId], references: [id])
  authorId      String
  news          News      @relation(fields: [newsId], references: [id])
  newsId        String
  parent        Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  parentId      String?
  replies       Comment[] @relation("CommentReplies")
}